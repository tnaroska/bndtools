import org.apache.tools.ant.filters.ReplaceTokens


assert(rootProject.hasProperty("bnd_cnf"      ))
assert(            hasProperty("bnd_project"  ))
assert(            hasProperty("bnd_targetDir"))


/* Eclipse settings for p2 publishing */
ext.bnd_eclipseDirectory         = "$rootProject.rootDir/$rootProject.bnd_cnf/eclipse-3.5.2"
ext.bnd_eclipseJar               = files("$bnd_eclipseDirectory/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar")
ext.bnd_eclipseJarMain           = "org.eclipse.equinox.launcher.Main"
ext.bnd_eclipseAntRunner         = "org.eclipse.ant.core.antRunner"
ext.bnd_eclipseCategoryPublisher = "org.eclipse.equinox.p2.publisher.CategoryPublisher"


/*
 * Helper Methods
 */

/*
 * Generate a p2 repository.
 */
void generateP2Repository(String title, String antTarget, String metadataRepository, String categoryDefinition) {
  assert(hasProperty("bnd_eclipseJar"              ))
  assert(hasProperty("bnd_eclipseJarMain"          ))
  assert(hasProperty("bnd_eclipseAntRunner"        ))
  assert(hasProperty("bnd_eclipseCategoryPublisher"))
  assert(hasProperty("bnd_targetDir"               ))

  def javaArgs  = []
  if (bnd_verbose) {
    javaArgs   += "-consoleLog"
  }
  javaArgs     += "-application"
  javaArgs     += bnd_eclipseAntRunner
  javaArgs     += "-data"
  javaArgs     += "$projectDir/$bnd_targetDir"
  javaArgs     += "-buildfile"
  javaArgs     += "p2.xml"
  javaArgs     += antTarget

  def result = javaexec {
    classpath      = bnd_eclipseJar
    main           = bnd_eclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not publish features and bundles - $title")
  }

  javaArgs  = []
  if (bnd_verbose) {
    javaArgs   += "-consoleLog"
  }
  javaArgs     += "-application"
  javaArgs     += bnd_eclipseCategoryPublisher
  javaArgs     += "-data"
  javaArgs     += "$projectDir/$bnd_targetDir"
  javaArgs     += "-metadataRepository"
  javaArgs     += "file:$projectDir/$bnd_targetDir/$metadataRepository"
  javaArgs     += "-categoryDefinition"
  javaArgs     += "file:$projectDir/$bnd_targetDir/$categoryDefinition"
  javaArgs     += "-compress"

  result = javaexec {
    classpath      = bnd_eclipseJar
    main           = bnd_eclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not categorise repository - $title")
  }

  /* Clean up the files Eclipse leaves behind */
  fileTree("$bnd_eclipseDirectory").include("configuration/*.log").each {
    it.delete()
  }

  delete(file("$bnd_eclipseDirectory/configuration/org.eclipse.core.runtime"))
  delete(file("$bnd_eclipseDirectory/configuration/org.eclipse.equinox.app" ))
  delete(file("$bnd_eclipseDirectory/configuration/org.eclipse.osgi"        ))
  delete(file("$bnd_eclipseDirectory/p2"                                    ))
}


/*
 * Setup tasks (p2 entry)
 */

task p2Entry {
}


/*
 * Setup tasks (p2 features)
 */

task p2FeaturesTree(type: Copy) {
  from    "feature"
  into    "$bnd_targetDir/features"
  filter(ReplaceTokens, tokens: [qualifier: new Date().format('yyyyMMdd-HHmmss')])
  include "**/category.xml"
  include "**/feature.xml"
}

task p2FeatureMain(type: Zip) {
  destinationDir = file("$bnd_targetDir/features/main")
  archiveName    = "bndtools.feature.jar"
  from             "$bnd_targetDir/features/main/bndtools"
  include          "feature.xml"
}

task p2FeatureJarViewer(type: Zip) {
  destinationDir = file("$bnd_targetDir/features/main")
  archiveName    = "bndtools.jarviewer.feature.jar"
  from             "$bnd_targetDir/features/main/jarviewer"
  include          "feature.xml"
}

task p2FeatureAcePlugin(type: Zip) {
  destinationDir = file("$bnd_targetDir/features/extras")
  archiveName    = "bndtools.ace.feature.jar"
  from             "$bnd_targetDir/features/extras/ace"
  include          "feature.xml"
}

task p2FeatureDMPlugin(type: Zip) {
  destinationDir = file("$bnd_targetDir/features/extras")
  archiveName    = "bndtools.dm.feature.jar"
  from             "$bnd_targetDir/features/extras/dm"
  include          "feature.xml"
}

task p2FeatureAmdatuPlugin(type: Zip) {
  destinationDir = file("$bnd_targetDir/features/extras")
  archiveName    = "bndtools.amdatu.feature.jar"
  from             "$bnd_targetDir/features/extras/amdatu"
  include          "feature.xml"
}

task p2Features {
}


/*
 * Setup tasks (p2 plugins)
 */

task p2PluginsMain(type: Copy) {
  from    zipTree("$bnd_targetDir/${bnd_project.name}.main.jar")
  into    "$bnd_targetDir/plugins/main"
  include "*.jar"
}

task p2PluginsExtras(type: Copy) {
  from    zipTree("$bnd_targetDir/${bnd_project.name}.extras.jar")
  into    "$bnd_targetDir/plugins/extras"
  include "*.jar"
}

task p2Plugins {
}


/*
 * Setup tasks (p2 repositories)
 */

task p2 {
  description "Generate the p2 repositories."
  group       "Distribution"

  inputs.files { fileTree(projectDir)
                   .include("p2.xml")
                   .include("$bnd_targetDir/p2/**")
                   .include("$bnd_targetDir/extras/p2/child/**")
                   .include("$bnd_targetDir/features/main/category.xml")
                   .include("$bnd_targetDir/features/extras/category.xml")
               }

  doLast {
    generateP2Repository("Main",   "p2Main",   "p2",              "features/main/category.xml")
    generateP2Repository("Extras", "p2Extras", "extras/p2/child", "features/extras/category.xml")
  }
}


/*
 * Setup tasks (distribution)
 */

task distZipMain(type: Zip) {
  destinationDir = file(bnd_targetDir)
  archiveName    = "bndtools-latest.zip"
  from             "$bnd_targetDir/p2"
  include          "**"
}

task distCompositeExtras(type: Copy) {
  from    "feature/extras"
  into    "$bnd_targetDir/extras/p2"
  include "compositeContent.xml"
  include "compositeArtifacts.xml"
}

task distZipExtras(type: Zip) {
  destinationDir = file(bnd_targetDir)
  archiveName    = "bndtools-extras-latest.zip"
  from             "$bnd_targetDir/extras/p2"
  include          "**"
}

task dist {
  description "Create distribution archives containing p2 repositories (including R5 indexes)."
  group       "Distribution"
}


/*
 * Setup task dependencies
 */

p2Entry.dependsOn                   += [bundle                        ]

p2FeaturesTree.dependsOn            += [p2Entry                       ]
p2FeatureMain.dependsOn             += [p2FeaturesTree                ]
p2FeatureJarViewer.dependsOn        += [p2FeaturesTree                ]
p2FeatureAcePlugin.dependsOn        += [p2FeaturesTree                ]
p2FeatureDMPlugin.dependsOn         += [p2FeaturesTree                ]
p2FeatureAmdatuPlugin.dependsOn     += [p2FeaturesTree                ]
p2Features.dependsOn                += [p2FeatureMain,
                                        p2FeatureJarViewer, 
                                        p2FeatureAcePlugin,
                                        p2FeatureDMPlugin,
                                        p2FeatureAmdatuPlugin
                                       ]

p2PluginsMain.dependsOn             += [p2Entry                       ]
p2PluginsExtras.dependsOn           += [p2Entry                       ]
p2Plugins.dependsOn                 += [p2PluginsMain, p2PluginsExtras]

p2.dependsOn                        += [p2Features,    p2Plugins      ]

indexOBR.dependsOn                  += [p2]
indexR5.dependsOn                   += [p2]

distZipMain.dependsOn               += [index                         ]
distCompositeExtras.dependsOn       += [index                         ]
distZipExtras.dependsOn             += [index, distCompositeExtras    ]
dist.dependsOn                      += [distZipMain, distZipExtras    ]
